generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String
  role     UserRole @default(GUEST)
  verified DateTime

  provider   String?
  providerId Int?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cart             Cart?
  order            Order[]
  verificationCode VerificationCode?
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Category   Category      @relation(fields: [categoryId], references: [id])
  categoryId Int
  Ingredient Ingredient[]
  items      ProductItem[]
}

model ProductItem {
  id        Int  @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product   Product    @relation(fields: [productId], references: [id])
  productId Int
  CartItem  CartItem[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  cartItem CartItem[] // костыль - что бы не ругалось
}

model Cart {
  id Int @id @default(autoincrement())

  token       String
  totalAmount Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  CartItem CartItem[]
}

model CartItem {
  id Int @id @default(autoincrement())

  quantity    Int          @default(1)
  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int
}

model Order {
  id          Int         @id @default(autoincrement())
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  email       String
  phone       String
  address     String
  comment     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("NOW() + interval '30 minutes'"))

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  ADMIN
  GUEST
  CLIENT
}
